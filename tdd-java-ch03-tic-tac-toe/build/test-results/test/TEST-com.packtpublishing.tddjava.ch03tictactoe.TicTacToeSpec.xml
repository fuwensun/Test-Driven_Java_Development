<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" tests="10" skipped="0" failures="1" errors="0" timestamp="2018-05-01T05:08:37" hostname="pro4" time="0.142">
  <properties/>
  <testcase name="whenPlayAndWholeHorizontalLineThenWinner" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.004"/>
  <testcase name="whenYoutsideBoardTheRuntimeException" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.015"/>
  <testcase name="whenPlayAndBottomTopDiagonalLisneThenWinner" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.004"/>
  <testcase name="whenOccupiedThenRuntimeExceptoin" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.001"/>
  <testcase name="whenXoutsideBoardThenRuntimeException" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.002"/>
  <testcase name="whenPlayAndWholeVerticalLineTheWinner" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.019"/>
  <testcase name="whenPlayAndTopBottomDiagonalLisneThenWinner" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.038"/>
  <testcase name="giveFirstTureWhenNextPlayerThenX" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.001"/>
  <testcase name="whenAllBoxesAreFilledThenDraw" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.03">
    <failure message="org.junit.ComparisonFailure: expected:&lt;[The result is draw]&gt; but was:&lt;[X is the winner]&gt;" type="org.junit.ComparisonFailure">org.junit.ComparisonFailure: expected:&lt;[The result is draw]&gt; but was:&lt;[X is the winner]&gt;
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec.whenAllBoxesAreFilledThenDraw(TicTacToeSpec.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:114)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:57)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:66)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy1.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:146)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:128)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.lang.Thread.run(Thread.java:748)
</failure>
  </testcase>
  <testcase name="whenPlayThenNoWinner" classname="com.packtpublishing.tddjava.ch03tictactoe.TicTacToeSpec" time="0.001"/>
  <system-out><![CDATA[   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>whenPlayAndWholeHorizontalLineThenWinner()!!!
   <=== myDebug !!!===>paly(x = 1, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 3, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>paly(x = 2, y = 51)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>whenPlayAndBottomTopDiagonalLisneThenWinner()
   <=== myDebug !!!===>paly(x = 1, y = 3)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 3, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>paly(x = 2, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>paly(x = 51, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>whenPlayAndWholeVerticalLineTheWinner()
   <=== myDebug !!!===>paly(x = 2, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 3, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 3)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>whenPlayAndTopBottomDiagonalLisneThenWinner()
   <=== myDebug !!!===>paly(x = 1, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 3)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 3, y = 3)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>whenAllBoxesAreFilledThenDraw()
   <=== myDebug !!!===>paly(x = 1, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 1, y = 3)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 2, y = 3)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 3, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 3, y = 3)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>paly(x = 3, y = 2)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>TicTacToeSpec()
   <=== myDebug !!!===>TicTacToe()
   <=== myDebug !!!===>paly(x = 1, y = 1)
   <=== myDebug !!!===>checkAxis()
   <=== myDebug !!!===>checkAxis()
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
